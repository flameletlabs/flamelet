#!/usr/bin/env bash
# shellcheck source-path=SCRIPTDIR/share/flamelet

_mainScript_() {
    
    # Colors
    # header "Showing alert colors"
    # debug "This is debug text"
    # info "This is info text"
    # notice "This is notice text"
    # dryrun "This is dryrun text"
    # warning "This is warning text"
    # error "This is error text"
    # success "This is success text"
    # input "This is input text"

    declare -a _cleanedOptions=("$@")

    local _tenant="${TENANT}"
    local _command="${ARGS[0]:-unset}"
    local _option="${OPTION:-unset}"

    # echo "_option: $_option"
    # printf "_cleanedOptions: %q\n" "${_cleanedOptions[@]}"

    # Check for required arguments
    _varIsFalse_ "${TENANT}" && \
        [[ ! $"${_command}" == 'sysinfo' && ! $"${_command}" == 'update' ]] && \
        fatal "Missing required tenant argument to ${FUNCNAME[0]}"

    local CFG_SSH_OPTIONS=()
    local CFG_SCP_OPTIONS=()
    local CFG_GIT_OPTIONS=()
    # declare -A CFG_SSH_OPTIONS=()
    # local CFG_ENV_CONTROLLER
    local CFG_SSH_CONTROLLER=""
    local CFG_ANSIBLE_PACKAGE=${CFG_ANSIBLE_PACKAGE:-ansible}
    local CFG_ANSIBLE_VERSION=""
    local CFG_FLAMELET_TENANT_REPO=""
    local CFG_ANSIBLE_INVENTORY=""
    local CFG_ANSIBLE_PLAYBOOK=""
    local CFG_ANSIBLE_GALAXY_COLLECTIONS_INSTALL=""
    local CFG_ANSIBLE_GALAXY_COLLECTIONS_REMOVE=""
    local CFG_ANSIBLE_GALAXY_ROLES_INSTALL=""
    local CFG_ANSIBLE_GALAXY_ROLES_REMOVE=""
    local CFG_ANSIBLE_OPTIONS=()
    declare -A CFG_NMAP_SUBNETS=()
    declare -A CFG_NMAP_SUBNETS_OPTS=()

    debug "Running on ${HOSTNAME}"
    # debug "${PATH}"

    ( _isDir_ "${HOME}/.flamelet/bin" ) && \
        _setPATH_ "${HOME}/.flamelet/bin"

    ( _isDir_ "${HOME}/.flamelet/tenant/flamelet-${_tenant}" ) && \
        ( _isFile_ "${HOME}/.flamelet/tenant/flamelet-${_tenant}/config.sh" ) && \
            _sourceFile_ "${HOME}/.flamelet/tenant/flamelet-${_tenant}/config.sh"

    ( _isFile_ "${HOME}/.flamelet/env.sh" ) && \
        _sourceFile_ "${HOME}/.flamelet/env.sh" && \
            success "sourced ${HOME}/.flamelet/env.sh"

    ( _isFile_ "${HOME}/.flamelet/tenant/flamelet-${_tenant}/env.sh" ) && \
        _sourceFile_ "${HOME}/.flamelet/tenant/flamelet-${_tenant}/env.sh" && \
            success "sourced ${HOME}/.flamelet/tenant/flamelet-${_tenant}/env.sh"

    if _varIsTrue_ "${REMOTE}"
    then
        info "Running remotely"
        mapfile -t _cleanedOptions < <(_cleanOptions_ "${_cleanedOptions[@]}")
        _runRemote_ "${_cleanedOptions[*]}"
        debug "RC: $?"
        _safeExit_
    fi

    # _printArray_ "_cleanedOptions"

    case "${_command}" in
        unset)
            _usage_
            _safeExit_
            ;;
        update)
            echo "update"
            _updateFlamelet_
            _safeExit_
            ;;
        installdeps)
            echo "installdeps"
            _installDeps_
            _safeExit_
            ;;
        installremote)
            echo "installremote"
            _installRemote_
            _safeExit_
            ;;
        sysinfo)
            echo "sysinfo"
            _getSystemInfo_
            _safeExit_
            ;;
        nmap)
            echo "nmap"
            _nmap_
            _safeExit_
            ;;
        installansible)
            echo "installansible"
            [ -n "${CFG_FLAMELET_TENANT_REPO}" ] && \
                _varIsFalse_ "${OFFLINE}" && \
                    _checkoutFlameletTenantRepo_
            _installAnsible_
            _safeExit_
            ;;
        ansible)
            echo "ansible"
            [ -n "${CFG_FLAMELET_TENANT_REPO}" ] && \
                _varIsFalse_ "${OFFLINE}" && \
                    _checkoutFlameletTenantRepo_
            _ansible_
            _safeExit_
            ;;
        ssh)
            echo "ssh"
            _safeExit_
            ;;
        checkout)
            echo "checkout"
            [ -n "${CFG_FLAMELET_TENANT_REPO}" ] && \
                _varIsFalse_ "${OFFLINE}" && \
                    _checkoutFlameletTenantRepo_
            _safeExit_
            ;;
        *)
            if declare -f _safeExit_ &>/dev/null; then
                fatal "invalid command: $_command"
            else
                printf "%s\n" "ERROR: Invalid command: $_command"
                exit 1
            fi
            ;;
    esac

    exit 0
}
#/_mainsScript_()

# ################################## Flags and defaults
# # Required variables
LOGFILE="${HOME}/logs/$(basename "$0").log"
QUIET=false
LOGLEVEL=ERROR
VERBOSE=false
FORCE=false
DRYRUN=false
REMOTE=false
OFFLINE=false
TENANT=false
declare -a ARGS=()

# Script specific

# ################################## Functions required for this template to work

_trapCleanup_() {
    # DESC:
    #         Log errors and cleanup from script when an error is trapped.  Called by 'trap'
    # ARGS:
    #         $1:  Line number where error was trapped
    #         $2:  Line number in function
    #         $3:  Command executing at the time of the trap
    #         $4:  Names of all shell functions currently in the execution call stack
    #         $5:  Scriptname
    #         $6:  $BASH_SOURCE
    # USAGE:
    #         trap '_trapCleanup_ ${LINENO} ${BASH_LINENO} "${BASH_COMMAND}" "${FUNCNAME[*]}" "${0}" "${BASH_SOURCE[0]}"' EXIT INT TERM SIGINT SIGQUIT SIGTERM ERR
    # OUTS:
    #         Exits script with error code 1

    local _line=${1:-} # LINENO
    local _linecallfunc=${2:-}
    local _command="${3:-}"
    local _funcstack="${4:-}"
    local _script="${5:-}"
    local _sourced="${6:-}"

    # Replace the cursor in-case 'tput civis' has been used
    tput cnorm

    if declare -f "fatal" &>/dev/null && declare -f "_printFuncStack_" &>/dev/null; then

        _funcstack="'$(printf "%s" "${_funcstack}" | sed -E 's/ / < /g')'"

        if [[ ${_script##*/} == "${_sourced##*/}" ]]; then
            fatal "${7:-} command: '${_command}' (line: ${_line}) [func: $(_printFuncStack_)]"
        else
            fatal "${7:-} command: '${_command}' (func: ${_funcstack} called at line ${_linecallfunc} of '${_script##*/}') (line: ${_line} of '${_sourced##*/}') "
        fi
    else
        printf "%s\n" "Fatal error trapped. Exiting..."
    fi

    if declare -f _safeExit_ &>/dev/null; then
        _safeExit_ 1
    else
        exit 1
    fi
}

_findBaseDir_() {
    # DESC:
    #         Locates the real directory of the script being run. Similar to GNU readlink -n
    # ARGS:
    #         None
    # OUTS:
    #         stdout: prints result
    # USAGE:
    #         baseDir="$(_findBaseDir_)"
    #         cp "$(_findBaseDir_ "somefile.txt")" "other_file.txt"

    local _source
    local _dir

    # Is file sourced?
    if [[ ${_} != "${0}" ]]; then
        _source="${BASH_SOURCE[1]}"
    else
        _source="${BASH_SOURCE[0]}"
    fi

    while [ -h "${_source}" ]; do # Resolve $SOURCE until the file is no longer a symlink
        _dir="$(cd -P "$(dirname "${_source}")" && pwd)"
        _source="$(readlink "${_source}")"
        [[ ${_source} != /* ]] && _source="${_dir}/${_source}" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    printf "%s\n" "$(cd -P "$(dirname "${_source}")" && pwd)"
}

_sourceUtilities_() {
    # DESC:
    #         Sources utility functions.  Absolute paths are required for shellcheck to correctly
    #         parse the sourced files
    # ARGS:
    #					$1 (Required):  Absolute path to the directory containing the utilities
    # OUTS:
    #					 0:  Success
    #					 1:  Failure
    # USAGE:
    #					_sourceUtilities_ "$(_findBaseDir_)/../../shell-scripting-templates/utilities"

    local _utilsPath
    _utilsPath="${1}"

    if [ -f "${_utilsPath}/alerts.bash" ]; then
        source "${_utilsPath}/alerts.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/alerts.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/arrays.bash" ]; then
        source "${_utilsPath}/arrays.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/arrays.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/checks.bash" ]; then
        source "${_utilsPath}/checks.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/checks.bash not found"
        exit 1
    fi

    # if [ -f "${_utilsPath}/dates.bash" ]; then
    #     source "${_utilsPath}/dates.bash"
    # else
    #     printf "%s\n" "ERROR: ${_utilsPath}/dates.bash not found"
    #     exit 1
    # fi

    if [ -f "${_utilsPath}/debug.bash" ]; then
        source "${_utilsPath}/debug.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/debug.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/files.bash" ]; then
        source "${_utilsPath}/files.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/files.bash not found"
        exit 1
    fi

    # if [ -f "${_utilsPath}/macOS.bash" ]; then
    #     source "${_utilsPath}/macOS.bash"
    # else
    #     printf "%s\n" "ERROR: ${_utilsPath}/macOS.bash not found"
    #     exit 1
    # fi

    if [ -f "${_utilsPath}/misc.bash" ]; then
        source "${_utilsPath}/misc.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/misc.bash not found"
        exit 1
    fi

    # if [ -f "${_utilsPath}/services.bash" ]; then
    #     source "${_utilsPath}/services.bash"
    # else
    #     printf "%s\n" "ERROR: ${_utilsPath}/services.bash not found"
    #     exit 1
    # fi

    # if [ -f "${_utilsPath}/strings.bash" ]; then
    #     source "${_utilsPath}/strings.bash"
    # else
    #     printf "%s\n" "ERROR: ${_utilsPath}/strings.bash not found"
    #     exit 1
    # fi

    if [ -f "${_utilsPath}/template_utils.bash" ]; then
        source "${_utilsPath}/template_utils.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/template_utils.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/setv.bash" ]; then
        source "${_utilsPath}/setv.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/setv.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/flamelet.bash" ]; then
        source "${_utilsPath}/flamelet.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/flamelet.bash not found"
        exit 1
    fi
}

_parseOptions_() {
    # DESC:
    #					Iterates through options passed to script and sets variables.
    #                   Will break -ab into -a -b when needed and --foo=bar into --foo bar
    # ARGS:
    #					$@ from command line
    # OUTS:
    #					Sets array 'ARGS' containing all arguments passed to script that were not parsed as options
    # USAGE:
    #					_parseOptions_ "$@"

    # Iterate over options
    local _optstring=h
    declare -a _options
    local _c
    local i
    while (($#)); do
        case $1 in
            # If option is of type -ab
            -[!-]?*)
                # Loop over each character starting with the second
                for ((i = 1; i < ${#1}; i++)); do
                    _c=${1:i:1}
                    _options+=("-${_c}") # Add current char to options
                    # If option takes a required argument, and it's not the last char make
                    # the rest of the string its argument
                    if [[ ${_optstring} == *"${_c}:"* && -n ${1:i+1} ]]; then
                        _options+=("${1:i+1}")
                        break
                    fi
                done
                ;;
            # If option is of type --foo=bar
            --?*=*) _options+=("${1%%=*}" "${1#*=}") ;;
            # add --endopts for --
            --) _options+=(--endopts) ;;
            # Otherwise, nothing special
            *) _options+=("$1") ;;
        esac
        shift
    done
    set -- "${_options[@]:-}"
    unset _options

    # Read the options and set stuff
    # shellcheck disable=SC2034
    while [[ ${1:-} == -?* ]]; do
        case $1 in
            # Custom options
            -t | --tenant)
                shift
                TENANT=${1}
                ;;
            -o | --option)
                shift
                # OPTION=${1}
                OPTION+="\"${1}\""
                ;;
            # Common options
            -h | --help)
                _usage_
                _safeExit_
                ;;
            --loglevel)
                shift
                LOGLEVEL=${1}
                ;;
            --logfile)
                shift
                LOGFILE="${1}"
                ;;
            -r | --remote) REMOTE=true ;;
            -l | --offline) OFFLINE=true ;;
            -n | --dryrun) DRYRUN=true ;;
            -v | --verbose) VERBOSE=true ;;
            -q | --quiet) QUIET=true ;;
            --force) FORCE=true ;;
            --endopts)
                shift
                break
                ;;
            *)
                if declare -f _safeExit_ &>/dev/null; then
                    fatal "invalid option: $1"
                else
                    printf "%s\n" "ERROR: Invalid option: $1"
                    exit 1
                fi
                ;;
        esac
        shift
    done

    if [[ -z ${*} || ${*} == null ]]; then
        ARGS=()
    else
        ARGS+=("$@") # Store the remaining user input as arguments.
    fi
}

_usage_() {
    cat <<USAGE_TEXT

  ${bold}$(basename "$0") [OPTION]... [COMMAND]...${reset}

  Flamelet usage

  ${bold}Options:${reset}
    -h, --help              Display this help and exit
    --loglevel [LEVEL]      One of: FATAL, ERROR, WARN, INFO, NOTICE, DEBUG, ALL, OFF
                            (Default is 'ERROR')
    --logfile [FILE]        Full PATH to logfile.  (Default is '${HOME}/logs/$(basename "$0").log')
    -n, --dryrun            Non-destructive. Makes no permanent changes.
    -r, --remote            Run over remote server
    -l, --offline           Offline mode (no checkout)
    -q, --quiet             Quiet (no output)
    -v, --verbose           Output more information. (Items echoed to 'verbose')
    --force                 Skip all user interaction.  Implied 'Yes' to all actions.

  ${bold}Commands:${reset}
    ansible                 Run the ansible command

  ${bold}Example Usage:${reset}

    ${gray}# Run ansible part of flamelet remotely.${reset}
    $(basename "$0") -t <tenant> -r -o "--limit\ <foo>\ --tags\ users" ansible
USAGE_TEXT
}

# ################################## INITIALIZE AND RUN THE SCRIPT

trap '_trapCleanup_ ${LINENO} ${BASH_LINENO} "${BASH_COMMAND}" "${FUNCNAME[*]}" "${0}" "${BASH_SOURCE[0]}"' EXIT INT TERM SIGINT SIGQUIT SIGTERM

# Trap errors in subshells and functions
set -o errtrace

# Exit on error. Append '||true' if you expect an error
set -o errexit

# Use last non-zero exit code in a pipeline
set -o pipefail

# Confirm we have BASH greater than v4
[ "${BASH_VERSINFO:-0}" -ge 4 ] || {
    printf "%s\n" "ERROR: BASH_VERSINFO is '${BASH_VERSINFO:-0}'.  This script requires BASH v4 or greater."
    exit 1
}

# Make `for f in *.txt` work when `*.txt` matches zero files
shopt -s nullglob globstar

# Set IFS to preferred implementation
IFS=$' \n\t'

# Run in debug mode
# set -o xtrace

# Source utility functions
_sourceUtilities_ "$(_findBaseDir_)/share/flamelet"

# Initialize color constants
_setColors_

# Disallow expansion of unset variables
set -o nounset

# Force arguments when invoking the script
# [[ $# -eq 0 ]] && _parseOptions_ "-h"

# Parse arguments passed to script
_parseOptions_ "$@"

# Create a temp directory '$TMP_DIR'
# _makeTempDir_ "$(basename "$0")"

# Acquire script lock
# _acquireScriptLock_

# Add Homebrew bin directory to PATH (MacOS)
# _homebrewPath_

# Source GNU utilities from Homebrew (MacOS)
# _useGNUutils_

# Run the main logic script
_mainScript_ "$@"

# Exit cleanly
_safeExit_
